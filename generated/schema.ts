// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CarbonOpus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CarbonOpus entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CarbonOpus entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CarbonOpus", id.toString(), this);
    }
  }

  static load(id: string): CarbonOpus | null {
    return changetype<CarbonOpus | null>(store.get("CarbonOpus", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get carbonSettings(): string | null {
    let value = this.get("carbonSettings");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set carbonSettings(value: string | null) {
    if (!value) {
      this.unset("carbonSettings");
    } else {
      this.set("carbonSettings", Value.fromString(<string>value));
    }
  }

  get carbonEconomics(): string | null {
    let value = this.get("carbonEconomics");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set carbonEconomics(value: string | null) {
    if (!value) {
      this.unset("carbonEconomics");
    } else {
      this.set("carbonEconomics", Value.fromString(<string>value));
    }
  }
}

export class CarbonSettings extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CarbonSettings entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CarbonSettings entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CarbonSettings", id.toString(), this);
    }
  }

  static load(id: string): CarbonSettings | null {
    return changetype<CarbonSettings | null>(store.get("CarbonSettings", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get carbonOpus(): string | null {
    let value = this.get("carbonOpus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set carbonOpus(value: string | null) {
    if (!value) {
      this.unset("carbonOpus");
    } else {
      this.set("carbonOpus", Value.fromString(<string>value));
    }
  }
}

export class CarbonEconomics extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CarbonEconomics entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CarbonEconomics entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CarbonEconomics", id.toString(), this);
    }
  }

  static load(id: string): CarbonEconomics | null {
    return changetype<CarbonEconomics | null>(store.get("CarbonEconomics", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get carbonOpus(): string | null {
    let value = this.get("carbonOpus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set carbonOpus(value: string | null) {
    if (!value) {
      this.unset("carbonOpus");
    } else {
      this.set("carbonOpus", Value.fromString(<string>value));
    }
  }

  get carbonSettings(): string | null {
    let value = this.get("carbonSettings");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set carbonSettings(value: string | null) {
    if (!value) {
      this.unset("carbonSettings");
    } else {
      this.set("carbonSettings", Value.fromString(<string>value));
    }
  }
}
